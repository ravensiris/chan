#+TITLE: Project development
#+AUTHOR: Maksymilian Jod≈Çowski

* What is this?

This document will have all the plans and documentation for the project.

Using Emacs with Org mode strongly advised.

* Running the project
** Requirements

- [[https://www.php.net/releases/8.1/en.php][PHP 8.1]]
- [[https://lumen.laravel.com/docs/8.x#installation][Laravel Lumen]]
- [[https://lumen.laravel.com/docs/5.7/database#configuration][Supported database]]

** Optional

- [[https://phpunit.de/][PHPUnit]]

** Create a .env file

Copy the example /.env/ file

#+begin_src shell
cp .env.example .env
#+end_src

It should look like this:

#+begin_src conf
APP_NAME=Chan
APP_ENV=local
APP_KEY=
APP_DEBUG=true
APP_URL=http://localhost
APP_TIMEZONE=UTC

LOG_CHANNEL=stack
LOG_SLACK_WEBHOOK_URL=

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=chan
DB_USERNAME=homestead
DB_PASSWORD=secret

CACHE_DRIVER=file
QUEUE_CONNECTION=sync
#+end_src

Setup your database connection by setting the /DB_/ fields appropriately.

Example with postgresql:

#+begin_src conf
APP_NAME=Chan
APP_ENV=local
APP_KEY=
APP_DEBUG=true
APP_URL=http://localhost
APP_TIMEZONE=UTC

LOG_CHANNEL=stack
LOG_SLACK_WEBHOOK_URL=

DB_CONNECTION=pgsql
DB_HOST=127.0.0.1
DB_PORT=5432
DB_DATABASE=chan
DB_USERNAME=your_user
DB_PASSWORD=your_password

CACHE_DRIVER=file
QUEUE_CONNECTION=sync
#+end_src

** Run tests

Run `phpunit` in the project root directory

#+begin_src shell :results output
phpunit
#+end_src

#+RESULTS:
: PHPUnit 9.5.10 by Sebastian Bergmann and contributors.
:
: ....                                                                4 / 4 (100%)
:
: Time: 00:00.155, Memory: 40.28 MB
:
: OK (4 tests, 8 assertions)

** Run migrations

#+begin_src shell
php artisan migrate:fresh
#+end_src

*Optional* run seeders

#+begin_src shell
php artisan db:seed
#+end_src

** Run the server

#+begin_src shell
php -S localhost:8000 -t public
#+end_src

* Project minimum

Here we will go over the minimum working functionality expected in the *next* master branch merge.
You can read *next* as *current* if you're reading this in the master branch.
Read this document on develop branch for upcoming changes.

Basically everything will be described here.

** Errors

Error responses follow Google's style.

Some Google API documentation that will help understand how they are portrayed:

[[https://cloud.google.com/storage/docs/json_api/v1/status-codes]]

[[https://developers.google.com/calendar/api/guides/errors]]


*** Not Found

Example json response:

#+begin_src json
{
  "error": {
    "errors": [
      {
        "domain": "global",
        "reason": "notFound",
        "message": "Not Found"
      }
    ],
    "code": 404,
    "message": "Not Found"
  }
}
#+end_src

#+begin_src http
GET localhost:8000/boards/653e9a6d-1830-4165-8ca7-6f551e4e0ae1
Accept: application/json
#+end_src

#+RESULTS:
#+begin_example
HTTP/1.1 404 Not Found
Host: localhost:8000
Date: Thu, 06 Jan 2022 19:15:58 GMT
Connection: close
X-Powered-By: PHP/8.1.1
Cache-Control: no-cache, private
Date: Thu, 06 Jan 2022 19:15:58 GMT
Content-Type: application/json

{"error":{"errors":[{"domain":"global","reason":"notFound","message":"Not Found"}],"code":404,"message":"Not Found"}}
#+end_example

*** Invalid Uuid

Example json response:

#+begin_src json
{
  "error": {
    "errors": [
      {
        "domain": "board",
        "reason": "invalidUuid",
        "message": "`123` is not a valid UUIDv4.",
        "locationType": "path",
        "location": "/boards/"
      }
    ],
    "code": 400,
    "message": "`123` is not a valid UUIDv4."
  }
}
#+end_src

Example way to trigger:

#+begin_src http
GET localhost:8000/boards/123
Accept: application/json
#+end_src

#+RESULTS:
#+begin_example
HTTP/1.1 400 Bad Request
Host: localhost:8000
Date: Thu, 06 Jan 2022 19:17:37 GMT
Connection: close
X-Powered-By: PHP/8.1.1
Cache-Control: no-cache, private
Date: Thu, 06 Jan 2022 19:17:37 GMT
Content-Type: application/json

{"error":{"errors":[{"domain":"board","reason":"invalidUuid","message":"`123` is not a valid UUIDv4.","locationType":"path","location":"\/boards\/"}],"code":400,"message":"`123` is not a valid UUIDv4."}}
#+end_example

** Boards
*** Base model

    | attribute   | type   | example                              | extra   |
    |-------------+--------+--------------------------------------+---------|
    | id          | uuidv4 | eb6f2aa2-b9a7-4239-a89c-8d2cef484dae |         |
    | name        | text   | Technology                           | unique  |
    | shorthand   | text   | t                                    | unique  |
    | description | text   | /t/ - Technology                     | virtual |

In json format:

#+begin_src json
{
    "id": "eb6f2aa2-b9a7-4239-a89c-8d2cef484dae",
    "name": "Technology",
    "shorthand": "t",
    "description": "/t/ - Technology"
}
#+end_src

*** Endpoints
**** List all boards

Request format:

#+begin_src http
GET localhost:8000/boards/
Accept: application/json
#+end_src

#+RESULTS:
#+begin_example
HTTP/1.1 200 OK
Host: localhost:8000
Date: Wed, 05 Jan 2022 16:54:50 GMT
Connection: close
X-Powered-By: PHP/8.0.14
Cache-Control: no-cache, private
Date: Wed, 05 Jan 2022 16:54:50 GMT
Content-Type: application/json

[{"id":"c0849eda-be50-4c4e-8249-ddba738d776e","name":"Technology","shorthand":"g","description":"\/g\/ - Technology"}]
#+end_example

Example response json:

#+begin_src json
[
    {
        "id": "eb6f2aa2-b9a7-4239-a89c-8d2cef484dae",
        "name": "Technology",
        "shorthand": "t",
        "description": "/t/ - Technology"
    },
    {
        "id": "7510a583-ba79-4796-a7c0-6866319e9e87",
        "name": "video games",
        "shorthand": "vg",
        "description": "/vg/ - Video games"
    },
]
#+end_src

**** Show single board

Request format:

#+begin_src http
GET localhost:8000/boards/eb6f2aa2-b9a7-4239-a89c-8d2cef484dae
Accept: application/json
#+end_src

Example response json:

#+begin_src json
{
    "id": "eb6f2aa2-b9a7-4239-a89c-8d2cef484dae",
    "name": "Technology",
    "shorthand": "t",
    "description": "/t/ - Technology"
}
#+end_src

** Threads
*** Base model

    | attribute  | type     | example                              | extra                                       |
    |------------+----------+--------------------------------------+---------------------------------------------|
    | id         | uuidv4   | 1592fe29-bddb-4279-b47d-bb41e23a67a0 |                                             |
    | board_id   | uuidv4   | eb6f2aa2-b9a7-4239-a89c-8d2cef484dae |                                             |
    | op_id      | uuidv4   | c96ffb89-028a-4546-8f47-24b40ca00671 | unused(NULL allowed) until replies are done |
    | created_at | datetime | TODO                                 |                                             |
    | updated_at | datetime | TODO                                 | update at each message posted               |

   In json format:

   #+begin_src json
{
    "id": "1592fe29-bddb-4279-b47d-bb41e23a67a0",
    "board_id": "eb6f2aa2-b9a7-4239-a89c-8d2cef484dae",
    "op_id": "c96ffb89-028a-4546-8f47-24b40ca00671",
    "created_at": "TODO",
    "updated_at": "TODO"
}
   #+end_src
*** Endpoints
**** List threads per board

Request format:

#+begin_src http
GET localhost:8000/boards/eb6f2aa2-b9a7-4239-a89c-8d2cef484dae/threads
Accept: application/json
#+end_src

Example response json:
#+begin_src json
[
    {
        "id": "1592fe29-bddb-4279-b47d-bb41e23a67a0",
        "board_id": "eb6f2aa2-b9a7-4239-a89c-8d2cef484dae",
        "op_id": "c96ffb89-028a-4546-8f47-24b40ca00671",
        "created_at": "TODO",
        "updated_at": "TODO"
    },
    {
        "id": "caa794c0-5938-4e05-b4b7-662f6485d858",
        "board_id": "eb6f2aa2-b9a7-4239-a89c-8d2cef484dae",
        "op_id": "fd658530-c576-4414-97ef-2e81371aede4",
        "created_at": "TODO",
        "updated_at": "TODO"
    },
]
#+end_src

**** TODO Create thread
